{"version":3,"sources":["components/Element.js","components/Widget.js","components/Dashboards.js","App.js","reportWebVitals.js","index.js"],"names":["SUPPORTED_CHART_TYPES","Element","element","baseOptions","chartArea","width","height","type","hAxis","title","data","vAxis","includes","className","style","color","element_id","fontSize","this","props","widgetHeight","number","chartOptions","getChartOptions","chartType","loader","options","widgetKey","elementIndex","elementStyle","top","y","left","x","content","getContent","React","Component","Widget","widget","order","layout","elements","length","map","Dashboards","id","widgets","isMobile","test","navigator","userAgent","App","state","connected","console","log","setTimeout","sort","a","b","forEach","w","index","widgetsData","widget_id","widgetData","find","d","e","filter","Boolean","firstInLine","totalWidth","row","push","Math","max","totalHeight","reduce","ratio","calcWidgetsData","setState","tryToConnect","src","dashboardScreen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ce95306.chunk.js","sourcesContent":["import React from \"react\";\nimport Chart from \"react-google-charts\";\n\nconst SUPPORTED_CHART_TYPES = ['Text', 'LineChart','PieChart', 'BarChart'];\n\nexport default class Element extends React.Component {\n    getChartOptions(element){\n        const baseOptions = {\n            chartArea: { width: '66%', height: \"70%\" },\n        }\n        switch(element.type) {\n            case 'LineChart':\n                return {\n                    ...baseOptions,\n                    hAxis: {\n                        title: element.data[element.type][0][0],\n                    },\n                    vAxis: {\n                        title: element.data[element.type][0][1],\n                    },\n                };\n            case 'BarChart':\n                return {\n                    ...baseOptions,\n                    hAxis: {\n                        title: '',\n                    },\n                    vAxis: {\n                        title: element.data[element.type][0][0],\n                    },\n                }\n            default:\n                return {};\n        }\n    }\n\n    getContent(element){\n        if (!SUPPORTED_CHART_TYPES.includes(element.type)){\n            return <div className=\"all-content-type not-supported-type\" style={{...element.style, color: element.data.color }}>\n                {element.element_id} = {element.type} (not supported type)\n            </div>\n        }\n\n        if (element.type === 'Text'){\n            const fontSize = `${this.props.widgetHeight * 3}px`\n            return <div className=\"all-content-type content-type-text resize-on-hover\" style={{...element.style, color: element.data.color, fontSize }}>\n                {element.data.number}\n            </div>\n        }\n        const chartOptions = this.getChartOptions(element);\n        return <div className=\"all-content-type\" style={element.style}>\n            <Chart\n                width={'100%'}\n                height={'100%'}\n                chartType={element.type}\n                loader={<div>Loading Chart..</div>}\n                data={element.data[element.type]}\n                options={chartOptions}\n            />\n        </div>\n    }\n\n    render() {\n        const { element, widgetKey, elementIndex } = this.props;\n        const elementStyle = {\n            width: `${element.width}%`,\n            height: `${element.height}%`,\n            top: `${element.y}%`,\n            left: `${element.x}%`,\n        };\n        const content = this.getContent(element);\n        return <div className=\"widget-element\" style={elementStyle} key={`e_${widgetKey}-${elementIndex}`}>\n            {content}\n        </div>\n    }\n}\n","import React from \"react\";\nimport Element from \"./Element\";\n\n\nexport default class Widget extends React.Component {\n\n    render() {\n        const { widget } = this.props;\n        widget.style = {\n            width: `${ widget.width}%`,\n            height: `${ widget.height}%`,\n            order: widget.order\n        };\n\n        const widgetKey= `w_${widget.order}.${widget.title}`;\n\n        return <div className=\"widget\" style={widget.style} key={widgetKey}>\n            <div className=\"widget-header\">\n                <span className=\"hidden-text\"> {widget.order}.</span><span>{widget.title}</span> <span className=\"hidden-text\">({widget.layout.elements.length} elements)</span>\n            </div>\n            <div className=\"widget-content\">\n                {widget.elements.map((element,elementIndex) =>\n                    <Element element={element} elementIndex={elementIndex} widgetKey={widgetKey} widgetHeight={ widget.height}/>\n                )}\n            </div>\n        </div>\n    }\n}\n\n","import React from \"react\";\nimport Widget from \"./Widget\";\n\n\nexport default class Dashboards extends React.Component {\n\n    render() {\n        return (\n            <div id=\"dashboards\">\n                <div id=\"dashboards-header\" >\n                    1Dashboard  <span className=\"hidden-text\">({this.props.widgets.length} widgets)</span>\n                </div>\n                <div id=\"dashboards-main-section\">\n                    { this.props.widgets.map((widget) => <Widget widget={widget} />)}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './style/app.css';\nimport Dashboards from './components/Dashboards';\nimport layout from \"./layout\";\nimport data from \"./data\";\n\nconst isMobile = ( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent));\n\n\nfunction calcWidgetsData(widgets){\n    widgets.sort((a,b)=> a.order < b.order ? -1 : 1);\n    widgets.forEach((w,index)=> w.order = index+1);\n    const widgetsData = [];\n    widgets.forEach((widget, index) => {\n        const { width, height, widget_id } = widget;\n        const widgetData = data.find(d => d.widget_id === widget_id);\n        widget.layout.elements.forEach(element =>{\n            element.data = widgetData ? widgetData.elements.find(e => e.element_id === element.element_id) : null;\n        })\n        widget.elements = widget.layout.elements.filter(element => Boolean(element.data));\n        const firstInLine = index === 0 || width + widgetsData[index -1].totalWidth > 100;\n        const row = index === 0  ? 0 : (firstInLine ?  widgetsData[index -1].row+1 : widgetsData[index -1].row);\n        const totalWidth = firstInLine ? width : width + widgetsData[index-1].totalWidth;\n        widget.row = row;\n        widget.firstInLine = firstInLine;\n        widgetsData.push(\n            {\n                row,\n                width,\n                height,\n                firstInLine,\n                totalWidth,\n            }\n        );\n    });\n    widgets.forEach((widget) => {\n        widget.height = Math.max(...widgetsData.filter(w=>w.row === widget.row).map(w=>w.height));\n    });\n\n    const totalHeight = widgets.filter(w=>w.firstInLine).map(w=>w.height).reduce((a, b) => a + b, 0);\n    if (totalHeight > 100){\n        const ratio = 100 / totalHeight;\n        widgets.forEach(w => w.height = w.height * ratio);\n    }\n\n    return widgets.filter(w => w.elements.length);\n}\n\nexport default class App extends React.Component {\n    state = {\n        connected: false,\n    };\n    tryToConnect(){\n        console.log('tryToConnect')\n        setTimeout(()=>{\n            const widgets = calcWidgetsData(layout.widgets);\n\n            this.setState({\n                connected: true,\n                widgets,\n            })\n        },900)\n    }\n    render() {\n        console.log('render')\n        const { connected, widgets } = this.state;\n\n        if (!connected){\n            //make call to get data\n            this.tryToConnect();  // TODO\n        }\n\n        const loader = <div id=\"welcome-page\">\n                <img id=\"pie-image-full\"  className=\"pie-image\" src=\"https://giladgreen.github.io/1dashboard/pie-full.png\" />\n                <img id=\"pie-image-1\"  className=\"pie-image\" src=\"https://giladgreen.github.io/1dashboard/pie_1.png\" />\n                <img id=\"pie-image-2\"  className=\"pie-image\" src=\"https://giladgreen.github.io/1dashboard/pie_2.png\" />\n                <img id=\"pie-image-3\"  className=\"pie-image\" src=\"https://giladgreen.github.io/1dashboard/pie_3.png\" />\n                <img id=\"pie-image-4\"  className=\"pie-image\" src=\"https://giladgreen.github.io/1dashboard/pie_4.png\" />\n            </div>;\n\n      const dashboardScreen = connected ? <Dashboards widgets={widgets} /> : <div></div>;\n        return (\n            <div id=\"app\" className=\"noselect\">\n                <div id=\"connected-state\">\n                    {connected ? 'Connected' : 'Connecting..'}\n                </div>\n                { !connected || isMobile ? loader : dashboardScreen }\n                {isMobile ? <div>Mobile not supported</div> : <div></div>}\n            </div>\n        );\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/app.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}