{"version":3,"sources":["components/Dashboards.js","App.js","reportWebVitals.js","index.js"],"names":["Dashboards","element","type","className","style","color","data","number","chartData","Object","keys","map","date","width","height","chartType","loader","options","hAxis","title","vAxis","chartArea","colors","minValue","element_id","this","props","widgetsData","Widgets","widgets","widget","index","newHeight","order","widgetElements","layout","elements","elementIndex","elementStyle","top","y","left","x","content","getContent","length","id","React","Component","calcWidgetsData","console","log","forEach","widget_id","widgetData","find","d","e","newLine","totalWidth","row","push","sameRowsHeight","filter","w","Math","max","totalHeight","reduce","a","b","ratio","App","state","connected","setTimeout","sort","setState","tryToConnect","welcomeScreen","src","dashoboardsScreen","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d037ddb.chunk.js","sourcesContent":["import React from \"react\";\nimport Chart from \"react-google-charts\";\n\n\nexport default class Dashboards extends React.Component {\n    getContent(element){\n\n        switch(element.type) {\n            case 'number':\n                return <div className=\"content-type-number all-content-type\" style={{...element.style, color: element.data.color }}>\n                    {element.data.number}\n                </div>\n                break;\n            case 'line-graph':\n                const chartData=[\n                        [ element.data[\"x-title\"],  element.data[\"y-title\"]],\n                    ...(Object.keys(element.data[\"line-graph\"]).map(date => [date, element.data[\"line-graph\"][date]]))\n                ];\n                return <div className=\"all-content-type\" style={element.style}>\n                    <Chart\n                        width={'100%'}\n                        height={'100%'}\n                        chartType=\"LineChart\"\n                        loader={<div>Loading Chart</div>}\n                        data={chartData}\n                        options={{\n                            hAxis: {\n                                title: element.data[\"x-title\"],\n                            },\n                            vAxis: {\n                                title: element.data[\"y-title\"],\n                            },\n                        }}\n                    />\n                </div>\n                break;\n            case 'pie-chart':\n                return <div className=\"all-content-type\" style={element.style}>\n                    <Chart\n                        width={'100%'}\n                        height={'100%'}\n                        chartType=\"PieChart\"\n                        loader={<div>Loading Chart</div>}\n                        data={element.data[\"pie-chart\"]}\n                        options={{\n\n                        }}\n                    />\n                </div>\n                break;\n            case 'bar-graph':\n                return <div className=\"all-content-type\" style={element.style}>\n                    <Chart\n                        width={'100%'}\n                        height={'100%'}\n                        chartType=\"BarChart\"\n                        loader={<div>Loading Chart</div>}\n                        data={element.data[\"bar-graph\"]}\n                        options={{\n                            chartArea: { width: '80%', height: \"60%\" },\n                            colors: ['#b0120a', '#ffab91'],//TODO\n                            hAxis: {\n                                title:  element.data[\"x-title\"],\n                                minValue: 0,\n                            },\n                            vAxis: {\n                                title:  element.data[\"y-title\"],\n                            },\n                        }}\n                    />\n                </div>\n                break;\n            default:\n                return <span> {element.element_id} = {element.type}</span>\n        }\n\n    }\n    render() {\n        const { widgetsData, widgets } = this.props;\n\n        const Widgets = widgets.map((widget,index) => {\n\n                const style = {\n                    width: `${widgetsData[index].width}%`,\n                    height: `${widgetsData[index].newHeight}%`,\n\n                    order: index+1\n                };\n                const { elements } = widget.layout;\n\n                const widgetElements  = elements.map((element,elementIndex) =>{\n                    const elementStyle = {\n                        width: `${element.width}%`,\n                        height: `${element.height}%`,\n                        top: `${element.y}%`,\n                        left: `${element.x}%`,\n                    };\n                    const content = this.getContent(element);\n                    return <div className=\"widget-element\" style={elementStyle} key={`${style.order}.${widget.title}-${elementIndex}`}>\n                        {content}\n\n\n                    </div>\n                })\n\n                return <div className=\"widget\" style={style} key={`${style.order}.${widget.title}`}>\n                    <div className=\"widget-header\">\n                        <span className=\"hidden-text\"> {style.order}.</span>{widget.title} <span className=\"hidden-text\">({widgetElements.length} elements)</span>\n                    </div>\n                    <div className=\"widget-content\">\n                        {widgetElements}\n\n                    </div>\n\n                </div>\n            });\n\n\n        return (\n            <div id=\"dashboards\">\n                <div id=\"dashboards-header\">\n                    1Dashboard  <span className=\"hidden-text\">({widgetsData.length} widgets)</span>\n                </div>\n                <div id=\"dashboards-main-section\">\n                    {Widgets}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport './style/app.css';\nimport Dashboards from './components/Dashboards';\nimport layout from \"./layout\";\nimport data from \"./data\";\n\nfunction calcWidgetsData(widgets){\n    console.log('calcWidgetsData')\n    const widgetsData = [];\n    widgets.forEach((widget, index) => {\n        const { width, height, layout: {elements}, widget_id } = widget;\n        const widgetData = data.find(d => d.widget_id === widget_id);\n        elements.forEach(element =>{\n            element.data = widgetData.elements.find(e => e.element_id === element.element_id)\n        })\n        const newLine = index === 0 || width +  widgetsData[index -1].totalWidth > 100;\n        let row = index === 0  ? 0 : (newLine ?  widgetsData[index -1].row+1 : widgetsData[index -1].row);\n        const totalWidth = newLine ? width :  width + widgetsData[index -1].totalWidth;\n        widgetsData.push(\n            {\n                row,\n                width,\n                height,\n                newLine,\n                totalWidth,\n            }\n        );\n    });\n    widgetsData.forEach((widget) => {\n        const sameRowsHeight = widgetsData.filter(w=>w.row === widget.row).map(w=>w.height);\n        widget.newHeight = Math.max(...sameRowsHeight);\n    });\n    widgetsData.forEach((widget) => {\n        const sameRowsHeight = widgetsData.filter(w=>w.row === widget.row).map(w=>w.height);\n        widget.newHeight = Math.max(...sameRowsHeight);\n    });\n    const totalHeight =  widgetsData.filter(w=>w.newLine).map(w=>w.newHeight).reduce((a, b) => a + b, 0);\n    if (totalHeight > 100){\n        const ratio = 100 / totalHeight;\n        widgetsData.forEach(w => w.newHeight = w.newHeight * ratio);\n    }\n\n    return widgetsData\n}\n\nexport default class App extends React.Component {\n    state = {\n        connected: false,\n    };\n    tryToConnect(){\n        console.log('tryToConnect')\n        setTimeout(()=>{\n\n            const widgets = layout.widgets.sort((a,b)=> a.order < b.order ? -1 : 1);\n            console.log('setTimeout cb', widgets)\n            this.setState({\n                connected: true,\n                widgets,\n                widgetsData: calcWidgetsData(widgets)\n            })\n        },4000)\n    }\n    render() {\n        console.log('render')\n        const { connected, widgets, widgetsData } = this.state;\n\n        if (!connected){\n            //make call to get data\n            this.tryToConnect();\n        }\n\n        const welcomeScreen = <div id=\"welcome-page\">\n                <img id=\"pie-image-full\"  className=\"pie-image\" src=\"https://giladgreen.github.io/1dashboard/pie-full.png\" />\n                <img id=\"pie-image-1\"  className=\"pie-image\" src=\"https://giladgreen.github.io/1dashboard/pie_1.png\" />\n                <img id=\"pie-image-2\"  className=\"pie-image\" src=\"https://giladgreen.github.io/1dashboard/pie_2.png\" />\n                <img id=\"pie-image-3\"  className=\"pie-image\" src=\"https://giladgreen.github.io/1dashboard/pie_3.png\" />\n                <img id=\"pie-image-4\"  className=\"pie-image\" src=\"https://giladgreen.github.io/1dashboard/pie_4.png\" />\n            </div>;\n\n      const dashoboardsScreen = connected ? <Dashboards widgets={widgets} widgetsData={widgetsData} data={data}/> : <div></div>;\n        return (\n            <div id=\"app\">\n                <div id=\"connected-state\">\n                    {connected ? 'Connected' : 'Connecting..'}\n                </div>\n                { !connected ? welcomeScreen : dashoboardsScreen }\n\n            </div>\n        );\n    }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/app.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}